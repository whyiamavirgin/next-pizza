generator client {
    provider = "prisma-client-js"
}

// Подключение к базе данных PostgreSQL

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Модель пользователя
// Поле email должно быть уникальным

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String @unique
    password String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Cart      Cart[]
}

// Модель категории 
// Имеется связь один-ко-многим с моделью Product

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Модель продукта
// Имеется связь один-ко-многим с моделью Product

model Product {
    id Int @id @default(autoincrement())

    name  String
    image String

    ingredients Ingredient[]
    items       ProductItem[]

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Модель вариации продукта
// Имеется связь один-ко-многим с моделью Product

model ProductItem {
    id Int @id @default(autoincrement())

    price     Int
    size      Int?
    pizzaType Int?

    cartItems CartItem[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int
}

// Модель ингредиентов
// Имеется связь один-ко-многим с моделью Product

model Ingredient {
    id Int @id @default(autoincrement())

    name  String
    price Int
    iamge String

    products Product[]

    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Модель корзины
// Имеется связь один-к-одному с моделью User

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    items CartItem[]

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Модель элемента корзины
// Имеется связь один-ко-многим с моделью Cart
// Имеется связь один-ко-многим с моделью ProductItem 
// Имеется связь многие-ко-многим с моделью Ingredient

model CartItem {
    id Int @id @default(autoincrement())

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quanity Int

    ingredient Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
